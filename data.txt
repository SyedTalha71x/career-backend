export const createPath = async (req, res) => {
  try {
    const { title, prompt } = req.body;
    const userId = req.user?.userId;
    const file = req.file;
    console.log("-------------------", userId);

    if (!userId) {
      return res
        .status(404)
        .json(failureResponse({ error: "Failed to create the path" }));
    }
    if (!title) {
      return res
        .status(400)
        .json(failureResponse({ error: "Title is required" }));
    }

    if (!prompt && !file) {
      return res
        .status(400)
        .json(failureResponse({ error: "Either prompt or file is required" }));
    }

    const fileName = file ? file.filename : null;
    console.log(fileName)

    const sqlQuery =
      "INSERT INTO path (title, prompt, status, user_id, file) VALUES (?, ?, ?, ?, ?)";

    pool.query(
      sqlQuery,
      [title || null, prompt || null, "pending", userId, fileName],
      async (err, result) => {
        if (err) {
          return res
            .status(500)
            .json(
              failureResponse(
                { error: "Internal Server Error" },
                "Failed to create the path"
              )
            );
        }

        try {
          const authHeader = req.header("Authorization");
          const roadmapResponse = await axios.post(
            `http://64.23.166.88:3500/generate_roadmap?id=${result.insertId}`,
            {},
            {
              headers: {
                Authorization: authHeader,
              },
            }
          );
          console.log("Roadmap response:", roadmapResponse.data);
        } catch (roadmapError) {
          console.error("Error calling generate_roadmap API:", roadmapError);
          return res
            .status(500)
            .json(
              failureResponse(
                { error: "Failed to call roadmap generation API" },
                "Failed to create the path"
              )
            );
        }

        res
          .status(200)
          .json(successResponse({}, "Path is created successfully"));
      }
    );
  } catch (error) {
    console.error("Unexpected error:", error);
    return res
      .status(500)
      .json(
        failureResponse(
          { error: "Internal Server Error" },
          "Failed to create the path"
        )
      );
  }
};
export const updatePath = (req, res) => {
  try {
    const {title, prompt } = req.body;
    const userId = req.user?.userId;
    const pathId = req.params.id;
    const file = req.file;

    if (!userId) {
      return res.status(404).json(failureResponse({ error: "User not found" }));
    }

    if (!pathId) {
      return res
        .status(400)
        .json(failureResponse({ error: "Path ID is required" }));
    }

    const fileName = file ? file.filename : null;

    if (prompt) {
      const sqlQuery = `UPDATE path SET prompt = ?, title = ? WHERE id = ? AND user_id = ?`;
      pool.query(sqlQuery, [prompt, title, pathId, userId], (err, result) => {
        if (err) {
          console.log("---", err);
          
          return res
            .status(500)
            .json(failureResponse({ error: "Internal Server Error" }));
        }

        if (result.affectedRows === 0) {
          return res
            .status(404)
            .json(
              failureResponse({ error: "Path not found or not owned by user" })
            );
        }

        return res
          .status(200)
          .json(successResponse({}, "Prompt updated successfully"));
      });
    } else if (fileName) {
      const sqlQuery = `UPDATE path SET file = ?, title = ? WHERE id = ? AND user_id = ?`;
      pool.query(sqlQuery, [fileName, title, pathId, userId], (err, result) => {
        if (err) {
          console.log("ooo", err);
          
          return res
            .status(500)
            .json(failureResponse({ error: "Internal Server Error" }));
        }

        if (result.affectedRows === 0) {
          return res
            .status(404)
            .json(
              failureResponse({ error: "Path not found or not owned by user" })
            );
        }

        return res
          .status(200)
          .json(successResponse({}, "File updated successfully"));
      });
    } else {
      return res
        .status(400)
        .json(
          failureResponse({ error: "Either prompt or file must be provided" })
        );
    }
  } catch (error) {
    console.error("Unexpected error:", error);
    return res
      .status(500)
      .json(failureResponse({ error: "Internal Server Error" }));
  }
};